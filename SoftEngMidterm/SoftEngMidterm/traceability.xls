Bridge Traceability		
Java Code	C# Code	Test Case(s)
bridge.StackArray: lines 17-56	bridge.StackArray: lines 13-80	"TestBridge.TestDefaultStackArrayCreation, TestBridge.TestStackArrayWithProvidedNumberOfCells, TestBridge.TestStackArrayPush, TestBridge.TestStackArrayIsEmpty, TestBridge.TestStackArrayIsFull, TestBridge.TestStackArrayPeek, TestBridge.TestStackArrayPop, TestBridge.TestStackArrayPushNegative"
bridge.StackArray.StackArray(): lines 21-23	bridge.StackArray.StackArray(): lines 18-22	TestBridge.TestDefaultStackArrayCreation
bridge.StackArray.StackArray(int cells): lines 25-27	bridge.StackArray.StackArray(int cells): lines 24-34	TestBridge.TestStackArrayWithProvidedNumberOfCells
bridge.StackArray.push(int i): lines 29-33	bridge.StackArray.push(int i): lines 38-48	"TestBridge.TestStackArrayPush, TestBridge.TestStackArrayPushNegative"
bridge.StackArray.isEmpty(): lines 35-37	bridge.StackArray.isEmpty(): line 50	TestBridge.TestStackArrayIsEmpty
bridge.StackArray.isFull(): lines 39-41	bridge.StackArray.isFull(): line 52	TestBridge.TestStackArrayIsFull
bridge.StackArray.top(): lines 43-48	bridge.StackArray.peek(): lines 54-62	TestBridge.TestStackArrayPeek
bridge.StackArray.pop(): lines 50-56	bridge.StackArray.pop(): lines 66-80	TestBridge.TestStackArrayPop
bridge.StackFIFO: lines 91-103	bridge.StackFIFO: lines 86-110	TestBridge.TestStackFIFOPop
bridge.StackFIFO.pop(): lines 93-102	bridge.StackFIFO.pop(): lines 92-109	TestBridge.TestStackFIFOPop
bridge.StackHanoi: lines 105-117	bridge.StackHanoi: lines 116-139	"TestBridge.TestStackHanoiReportRejected, TestBridge.TestStackHanoiPush"
bridge.StackHanoi.reportRejected(): lines 107-109	bridge.StackHanoi.reportRejected(): lines 120-123	TestBridge.TestStackHanoiReportRejected
bridge.StackHanoi.push(int in): lines 110-116	bridge.StackHanoi.push(int i): lines 127-138	TestBridge.TestStackHanoiPush
Iterator.java: lines 5-52	Iterator.cs all (modifying to support generic type instead of just integers)	iteratorTest
Factory.java: lines 5-42	Factory.cs all (modification to generate an object each time instead of passing a reference to the same object each time)	no change necessary to factory test class
